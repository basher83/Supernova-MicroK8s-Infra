terraform {
  required_providers {
    proxmox = {
      source  = "bpg/proxmox"
      version = ">= 0.73.2"
    }
  }
}

# Create vendor data snippet on the target Proxmox node
resource "proxmox_virtual_environment_file" "vendor_data" {
  content_type = "snippets"
  datastore_id = "local"
  node_name    = var.vm_node_name

  source_raw {
    file_name = "hercules-vault-init.yaml"
    data      = <<-EOF
#cloud-config

# Update system packages
package_update: true
package_upgrade: true

# Install base packages
packages:
  - qemu-guest-agent
  - curl
  - unzip
  - jq
  - ca-certificates
  - gnupg
  - lsb-release

# Add HashiCorp APT repository and install Vault
runcmd:
  # Enable and start QEMU guest agent first
  - systemctl enable qemu-guest-agent
  - systemctl start qemu-guest-agent

  # Add HashiCorp GPG key and repository
  - curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
  - echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" > /etc/apt/sources.list.d/hashicorp.list
  - apt-get update -y
  - apt-get install -y vault

  # Create vault user and directories (if not already created by package)
  - useradd --system --home /etc/vault.d --shell /bin/false vault || true
  - mkdir -p /etc/vault.d
  - mkdir -p /opt/vault/data
  - mkdir -p /opt/vault/logs
  - chown -R vault:vault /etc/vault.d
  - chown -R vault:vault /opt/vault

  # Set capabilities for Vault binary to use mlock
  - setcap cap_ipc_lock=+ep /usr/bin/vault

  # Create basic vault configuration template
  - |
    cat > /etc/vault.d/vault.hcl << 'VAULTEOF'
    # Vault Configuration - Generated by cloud-init
    ui = true
    cluster_addr = "https://VAULT_CLUSTER_ADDR:8201"
    api_addr = "https://VAULT_API_ADDR:8200"

    listener "tcp" {
      # Bind to loopback by default for safety while TLS is disabled
      # Change to 0.0.0.0 if remote access without TLS is required
      address = "127.0.0.1:8200"
      tls_disable = true
      # TODO: Enable TLS in production
    }

    storage "raft" {
      path = "/opt/vault/data"
      node_id = "VAULT_NODE_ID"
    }

    # Enable Prometheus metrics
    telemetry {
      prometheus_retention_time = "30s"
      disable_hostname = true
    }

    # Logging
    log_level = "INFO"
    log_file = "/opt/vault/logs/vault.log"
    log_rotate_duration = "24h"
    log_rotate_max_files = 7
    VAULTEOF

  # Set proper permissions
  - chmod 640 /etc/vault.d/vault.hcl
  - chown vault:vault /etc/vault.d/vault.hcl

  # Enable vault service (but don't start yet - needs configuration)
  - systemctl daemon-reload
  - systemctl enable vault

  # Create vault environment variables (KEY=VALUE format for /etc/environment)
  - echo 'VAULT_ADDR=http://localhost:8200' >> /etc/environment
  - echo 'VAULT_SKIP_VERIFY=true' >> /etc/environment

# Create helpful documentation
write_files:
  - path: /opt/vault/README.md
    content: |
      # Vault Installation via Cloud-Init

      Vault has been installed and configured via cloud-init.

      ## Installation Details:
      - Vault binary: /usr/bin/vault
      - Configuration: /etc/vault.d/vault.hcl
      - Data directory: /opt/vault/data
      - Logs directory: /opt/vault/logs
      - Service: vault.service (enabled but not started)

      ## Next Steps:
      1. Update vault.hcl with node-specific settings
      2. Initialize Vault cluster
      3. Start Vault service: systemctl start vault

      ## Useful Commands:
      - Status: systemctl status vault
      - Logs: journalctl -u vault -f
      - Vault CLI: vault status
    permissions: '0644'
    owner: vault:vault

  - path: /opt/vault/init-cluster.sh
    content: |
      #!/bin/bash
      # Vault Cluster Initialization Helper
      echo "Vault installation completed via cloud-init"
      echo "Binary location: $(which vault)"
      vault version
      echo ""
      echo "Configuration file: /etc/vault.d/vault.hcl"
      echo "To start Vault: sudo systemctl start vault"
    permissions: '0755'
    owner: vault:vault

# Reboot after installation completes
power_state:
  delay: 60
  mode: reboot
  timeout: 30
  condition: true
    EOF
  }
}

resource "proxmox_virtual_environment_vm" "vm" {
  name      = var.vm_name
  vm_id     = var.vm_id
  node_name = var.vm_node_name

  tags        = var.vm_tags
  description = "Provisioned by Terraform"
  bios        = "ovmf"

  agent {
    enabled = true # Will be installed via cloud-init
    timeout = "5m" # Reduced from default 15m since cloud-init installs it quickly
  }

  clone {
    vm_id     = var.template_id
    node_name = var.template_node # Source node where template exists
    full      = true
  }

  disk {
    datastore_id = var.vm_datastore
    interface    = "scsi0"
    size         = var.vm_disk_size
    file_format  = "raw"
    cache        = "writeback"
    iothread     = false
  }

  efi_disk {
    datastore_id      = var.vm_datastore
    file_format       = "raw"
    type              = "4m"
    pre_enrolled_keys = true
  }

  network_device {
    bridge = var.vm_bridge_1
  }

  dynamic "network_device" {
    for_each = var.enable_dual_network ? [1] : []
    content {
      bridge = var.vm_bridge_2
    }
  }

  cpu {
    cores = var.vcpu
    type  = var.vcpu_type
  }

  memory {
    dedicated = var.memory
  }

  initialization {
    interface = "ide2"
    type      = "nocloud"

    vendor_data_file_id = proxmox_virtual_environment_file.vendor_data.id

    user_account {
      username = var.cloud_init_username
      keys     = [var.ci_ssh_key]
    }

    ip_config {
      ipv4 {
        address = var.vm_ip_primary
        gateway = var.vm_gateway
      }
    }

    dns {
      servers = var.dns_servers
    }

    dynamic "ip_config" {
      for_each = var.enable_dual_network && var.vm_ip_secondary != "" ? [1] : []
      content {
        ipv4 {
          address = var.vm_ip_secondary
        }
      }
    }
  }

  lifecycle {
    ignore_changes = [initialization["user_account"]]
  }
}
